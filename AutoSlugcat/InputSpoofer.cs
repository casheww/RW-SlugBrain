using System.Collections.Generic;
using RWCustom;
using UnityEngine;

namespace SlugBrain
{
    class InputSpoofer
    {
        public InputSpoofer()
        {
            inputPackage = new Player.InputPackage();
            inputBuffer = new List<HeldInput>();
        }

        /// <summary>
        /// Combines automated inputs registered via <see cref="PushNewInput(Player.InputPackage)"/>
        /// with player inputs. Can also be used for combining sets of auto inputs.
        /// </summary>
        /// <param name="orig">Inputs generated by the player.</param>
        public Player.InputPackage ModifyInputs(Player.InputPackage orig)
        {
            orig.x = Mathf.Clamp(orig.x + inputPackage.x, -1, 1);
            orig.y = Mathf.Clamp(orig.y + inputPackage.y, -1, 1);

            orig.jmp = orig.jmp || inputPackage.jmp;
            orig.mp = orig.mp || inputPackage.mp;
            orig.pckp = orig.pckp || inputPackage.pckp;
            orig.thrw = orig.thrw || inputPackage.thrw;

            return orig;
        }

        /// <summary>
        /// Registers automated inputs to be combined with player inputs.
        /// </summary>
        public void PushNewInput(Player.InputPackage newInput)
        {
            inputPackage = newInput;

            List<int> toRemove = new List<int>();

            for (int i = 0; i < inputBuffer.Count; i++)
            {
                HeldInput newBufferItem = new HeldInput(inputBuffer[i].input, inputBuffer[i].frames - 1);

                if (newBufferItem.frames <= 0)
                {
                    toRemove.Add(i);
                }
                else
                {
                    inputPackage = ModifyInputs(newBufferItem.input);
                }

                inputBuffer[i] = newBufferItem;
            }

            foreach (int i in toRemove) inputBuffer.RemoveAt(i);
        }

        public void HoldNewInput(Player.InputPackage newInput, int frames)
        {
            inputBuffer.Add(new HeldInput(newInput, frames));
        }

        public void Jump(int frames)
        {
            HoldNewInput(new Player.InputPackage() { jmp = true }, frames);
        }

        public void ClearInputExceptBuffer()
        {
            inputPackage = new Player.InputPackage();
        }

        public void ClearAllInput()
        {
            inputBuffer.Clear();
            ClearInputExceptBuffer();
        }


        Player.InputPackage inputPackage;

        List<HeldInput> inputBuffer;

        public int X => inputPackage.x;
        public int Y => inputPackage.y;
        public IntVector2 Dir => new IntVector2(X, Y);
        public bool IsJumping => inputPackage.jmp;
        public bool IsLookingAtMap => inputPackage.mp;
        public bool IsGrabbing => inputPackage.pckp;
        public bool IsThrowing => inputPackage.thrw;


        public struct HeldInput
        {
            public HeldInput(Player.InputPackage input, int frames)
            {
                this.input = input;
                this.frames = frames;
            }

            public Player.InputPackage input;
            public int frames;
        }

    }
}
