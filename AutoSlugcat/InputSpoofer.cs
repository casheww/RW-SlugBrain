using System.Collections.Generic;
using UnityEngine;

namespace SlugBrain
{
    class InputSpoofer
    {
        public InputSpoofer()
        {
            _packages = new List<Player.InputPackage>();
        }

        /// <summary>
        /// Combines automated inputs registered via <see cref="PushInputPackages"/>
        /// with player inputs. Can also be used for combining sets of auto inputs.
        /// </summary>
        /// <param name="orig">Inputs generated by the player.</param>
        public Player.InputPackage ModifyInput(Player.InputPackage orig)
        {
            Player.InputPackage newPackage;

            if (_packages.Count > 0)
            {
                newPackage = CombineInputs(orig, _packages[0]);
                _packages.RemoveAt(0);
            }
            else newPackage = new Player.InputPackage();

            PreviousInput = newPackage;
            return newPackage;
        }

        /// <summary>
        /// Registers automated inputs to be combined with player inputs. <br/>
        /// Each item the inputs array should represent the input package for x frames in the future,
        /// where x is the index of the item. 
        /// </summary>
        public void PushInputPackages(Player.InputPackage[] inputs)
        {
            for (int i = 0; i < inputs.Length; i++)
                _packages.Add(i < _packages.Count ? CombineInputs(_packages[i], inputs[i]) : inputs[i]);
        }

        private static Player.InputPackage CombineInputs(Player.InputPackage in0, Player.InputPackage in1)
        {
            in0.x = Mathf.Clamp(in0.x + in1.x, -1, 1);
            in0.y = Mathf.Clamp(in0.y + in1.y, -1, 1);

            in0.jmp = in0.jmp || in1.jmp;
            in0.mp = in0.mp || in1.mp;
            in0.pckp = in0.pckp || in1.pckp;
            in0.thrw = in0.thrw || in1.thrw;

            return in0;
        }


        private readonly List<Player.InputPackage> _packages;
        public Player.InputPackage PreviousInput { get; private set; }

    }
}
